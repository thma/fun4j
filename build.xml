<project name="fun4j" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="fun4j.release" value="2.0" />
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		<format property="TODAY_FILE" pattern="yyyyMMdd_HHmmss" />
	</tstamp>

	<!-- DO NOT CHANGE -->
	<!-- set global properties for this build -->
	<property name="project-name" value="fun4j" />
	<property name="jar-filename" value="${project-name}-${fun4j.release}.jar" />
	<property name="jar-nodep-filename" value="${project-name}-nodep-${fun4j.release}.jar" />
	<property name="jarsrc-filename" value="${project-name}-${fun4j.release}-sources.jar" />
	<property name="srcdist-filename" value="${project-name}-${fun4j.release}-src.tgz" />

	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />

	<path id="compilation-classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>


	<target name="init" depends="clean">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="doc/javadocs" />
	</target>

	<target name="version">
		<typedef resource="com/googlecode/svntask/svntask.xml">
			<classpath>
				<fileset dir="lib">
					<include name="svnkit-*.jar"/>
					<include name="svntask-*.jar"/>
				</fileset>
			</classpath>
		</typedef>

		<!-- Do an update first to make sure you have the latest version -->
		<svn>
			<update path="" force="true" recursive="true" />
		</svn>

		<svn>
			<info path="." revisionProperty="revisionVersion" />
		</svn>
		<property name="fun4j.revision" value="${revisionVersion}" />
	</target>

	<target name="preprocess" depends="version">
		<delete file="${src}/org/fun4j/Version.java"/>
		<copy file="${src}/org/fun4j/Version.template" tofile="${src}/org/fun4j/Version.java" />
		<replace file="${src}/org/fun4j/Version.java" token="@RELEASE@" value="${fun4j.release}" />
		<replace file="${src}/org/fun4j/Version.java" token="@REVISION@" value="${fun4j.revision}" />
	</target>

	<target name="compile" depends="init, preprocess" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" debug="true">
			<classpath refid="compilation-classpath" />
		</javac>
	</target>

	<target name="copy-scheme" depends="init">
		<mkdir dir="${build}/scheme" />
		<copy todir="${build}">
			<fileset dir="scheme" includes="*.scm">
			</fileset>
		</copy>
	</target>

	<target name="create-jars" depends="compile, version, copy-scheme">
		<echo message="fun4j distribution: ${fun4j.release} build${fun4j.revision}; ${TODAY}" />

		<delete dir="${build}" includes="version_*" quiet="true" />
		<touch file="${build}/version_${fun4j.release}_build${fun4j.revision}_${TODAY_FILE}" />

		<!-- Create the distribution directory -->
		<mkdir dir="${dist}" />
        
        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${lib}/jarjar-1.3.jar"/>
		
		<!-- create a nodep jar file that contains inlined versions of all referenced jars. 
		     Using the nodep jar file
		     1. allows to start the command-line REPL by executing java -jar fun4j-nodep-<version>.jar
		     2. allows to use fun4j when conflicting versions of ASM or CGLIB are on the classpath
		-->
        <jarjar jarfile="${dist}/${jar-nodep-filename}">
            <fileset dir="build"/>
        	<zipgroupfileset dir="${lib}" includes="asm-4.0.jar,asm-tree-4.0.jar,cglib-nodep-2.2.2.jar"/>
      	
        	<rule pattern="org.objectweb.asm.**" result="org.fun4j.asm.@1"/>
        	<rule pattern="net.sf.cglib.**" result="org.fun4j.cglib.@1"/>

			<manifest>
				<attribute name="Specification-Title" value="fun4j" />
				<attribute name="Specification-Version" value="1.0" />
				<attribute name="Implementation-Title" value="fun4j" />
				<attribute name="Implementation-Version" value="${fun4j.release} b${fun4j.revision}; ${TODAY}" />
				<attribute name="Main-Class" value="org.fun4j.Repl" />
				<attribute name="Build-Date" value="${TODAY}" />
			</manifest>
        	
        </jarjar>
        

		<!-- Put everything in ${build} into the library jar file -->
		<jar jarfile="${dist}/${jar-filename}" basedir="${build}">
			<manifest>
				<attribute name="Specification-Title" value="fun4j" />
				<attribute name="Specification-Version" value="1.0" />
				<attribute name="Implementation-Title" value="fun4j" />
				<attribute name="Implementation-Version" value="${fun4j.release} b${fun4j.revision}; ${TODAY}" />
				<attribute name="Main-Class" value="org.fun4j.Repl" />
				<attribute name="Build-Date" value="${TODAY}" />
			</manifest>
		</jar>
        
        
		<!-- create source jar file -->
		<jar jarfile="${dist}/${jarsrc-filename}" basedir="${src}">
			<manifest>
				<attribute name="Specification-Title" value="fun4j" />
				<attribute name="Specification-Version" value="1.0" />
				<attribute name="Specification-Vendor" value="www.fun4j.org" />

				<attribute name="Implementation-Title" value="fun4j" />
				<attribute name="Implementation-Version" value="${fun4j.release} b${fun4j.revision}; ${TODAY}" />
				<attribute name="Build-Date" value="${TODAY}" />
			</manifest>
		</jar>

	</target>
	
	<target name="src-dist" depends="create-jars, javadoc">
		<copy todir="${dist}/src">
			<fileset dir="src" />
		</copy>
		<copy todir="${dist}/doc">
			<fileset dir="doc" />
		</copy>
		<copy todir="${dist}/lib">
			<fileset dir="lib" />
		</copy>
		<copy todir="${dist}/scheme">
			<fileset dir="scheme" />
		</copy>
		<copy todir="${dist}/test">
			<fileset dir="test" />
		</copy>
		<copy todir="${dist}/.settings">
			<fileset dir=".settings" />
		</copy>
		<copy file=".classpath" todir="${dist}"/>
		<copy file=".project" todir="${dist}"/>
		<copy file="ASM-LICENSE.txt" todir="${dist}"/>
		<copy file="FUN4J-LICENSE.txt" todir="${dist}"/>
		<copy file="build.xml" todir="${dist}"/>
		<copy file="todo.txt" todir="${dist}"/>
		<copy file="README.txt" todir="${dist}"/>
		
		<tar destfile="${dist}/${srcdist-filename}" basedir="${dist}" compression="gzip"/>

	</target>
	

	<target name="dist" depends="create-jars, src-dist" description="generate the distribution" />

	<target name="javadoc" depends="clean" description="build javadoc">
		<javadoc access="public" author="true" classpathref="compilation-classpath" destdir="doc/javadocs" doctitle="fun4j - functional programming for the JVM" nodeprecated="false" nodeprecatedlist="false" useexternalfile="yes" noindex="false" nonavbar="false" notree="false" sourcepath="${src}" packagenames="org.fun4j.*" excludepackagenames="" source="1.5" splitindex="true" use="true" version="true">

		</javadoc>
	</target>
	
	<target name="run-test" depends="compile, copy-scheme" description="run all tests">
			<!-- Compile the java code from test into ${build} -->
			<javac srcdir="test" destdir="${build}" debug="true">
				<classpath refid="compilation-classpath" />
			</javac>
	        <junit printsummary="yes" showoutput="true" fork="yes" dir="${build}">
	            <classpath refid="compilation-classpath"/>
	            <formatter type="xml" />
	            <test name="test.org.fun4j.AllUnitTests"
	                  haltonfailure="no"
	                  outfile="run-test"
	             >
	            </test>
	        </junit>
	    </target>

</project>
